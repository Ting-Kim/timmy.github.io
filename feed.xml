<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://ting-kim.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ting-kim.github.io/" rel="alternate" type="text/html" /><updated>2023-05-04T18:58:56+00:00</updated><id>https://ting-kim.github.io/feed.xml</id><title type="html">Ting-Kim 블로그</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Taeho Kim</name></author><entry><title type="html">테스트 코드 유지보수 해보기 3</title><link href="https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/05/04/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%BD%94%EB%93%9C_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98-3.html" rel="alternate" type="text/html" title="테스트 코드 유지보수 해보기 3" /><published>2023-05-04T00:00:00+00:00</published><updated>2023-05-04T00:00:00+00:00</updated><id>https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/05/04/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%BD%94%EB%93%9C_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%203</id><content type="html" xml:base="https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/05/04/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%BD%94%EB%93%9C_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98-3.html"><![CDATA[<p>이전 포스팅에 이어 테스트 코드 유지보수를 이어나가 보겠습니다.</p>

<p>이전 포스팅에서 적용한 것들은 다음과 같습니다.</p>

<ul>
  <li>test datasource 설정 (1)</li>
  <li><code class="language-plaintext highlighter-rouge">schema.sql</code>, <code class="language-plaintext highlighter-rouge">data.sql</code> 추가 (1)</li>
  <li>기획서를 참고하여 기존 로직 수정 (2)</li>
  <li>JPA 영속성 컨텍스트 관련 이슈 조치 (2)</li>
</ul>

<p>이렇게 했을 때, 마지막 테스트 수행 결과는 다음과 같았습니다.</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230504_1.png?raw=true" width="250" height="500" /></p>

<p><br /></p>

<h2 id="에러가-발생하는-테스트-케이스">에러가 발생하는 테스트 케이스</h2>

<p>여기서는 생각보다 다양한 Exception이 발생하고 있었습니다.</p>

<ul>
  <li>도메인 예외 케이스
    <ul>
      <li>ex. 필수값이 없거나, 적절하지 않은 상태 등..</li>
    </ul>
  </li>
  <li>DB로 부터 조회 결과가 없는 경우
    <ul>
      <li><code class="language-plaintext highlighter-rouge">repository.findById(id).get()</code> 호출 시 반환된 Optional이 empty인 경우</li>
    </ul>
  </li>
  <li>데이터 insert 시 unique key 중복</li>
  <li>Transaction 관련 예외 발생</li>
</ul>

<h3 id="도메인-예외-케이스">도메인 예외 케이스</h3>

<p>도메인 예외 케이스의 경우는 특정 도메인 객체 생성 시 시작 기간과 종료 기간에 대한 Validation을 통과하지 못하는 경우였습니다.</p>

<p>예를 들어, 주문 생성 시각이 주문 종료 시각 이후가 될 수 없겠죠?</p>

<p>테스트 코드 작성 시 테스트 객체 생성하는 작업이 굉장히 귀찮은 작업이라, 저는 몇몇 타입의 랜덤한 값을 생성해주는 유틸 클래스를 만들어서 사용하고 있었습니다. (요즘에는 FixtureMonkey 라는 멋진 라이브러리가 나왔죠 :) )</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RandomUtil</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>

	<span class="c1">// ..</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">Pair</span><span class="o">&lt;</span><span class="nc">ZonedDateTime</span><span class="o">,</span> <span class="nc">ZonedDateTime</span><span class="o">&gt;</span> <span class="nf">getPeriod</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">ZonedDateTime</span> <span class="n">before</span> <span class="o">=</span> <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="no">START_YEAR</span><span class="o">,</span> 
                                                <span class="no">START_MONTH</span><span class="o">,</span> 
                                                <span class="no">START_DAY_OF_MONTH</span><span class="o">,</span>
                                                <span class="no">START_HOUR</span><span class="o">,</span> 
                                                <span class="no">START_MINUTE</span><span class="o">,</span> 
                                                <span class="no">START_SECOND</span><span class="o">,</span> 
                                                <span class="no">START_NANO_OF_SECOND</span><span class="o">,</span> 
                                                <span class="no">STANDARD_ZONE_ID</span><span class="o">);</span>
		<span class="nc">ZonedDateTime</span> <span class="n">after</span> <span class="o">=</span> <span class="n">before</span><span class="o">.</span><span class="na">plusDays</span><span class="o">(</span><span class="n">getLong</span><span class="o">(</span><span class="mi">365</span> <span class="o">*</span> <span class="mi">10</span><span class="o">));</span> <span class="c1">// 종료 DateTime</span>
		<span class="k">return</span> <span class="nc">Pair</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">before</span><span class="o">,</span> <span class="n">after</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">Long</span> <span class="nf">getLong</span><span class="o">(</span><span class="kt">long</span> <span class="n">bound</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">bound</span> <span class="o">==</span> <span class="mi">0L</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">return</span> <span class="mi">0L</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="na">nextLong</span><span class="o">()</span> <span class="o">%</span> <span class="n">bound</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="c1">// ..</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위 코드를 보시면 기간 데이터를 생성할 때 <code class="language-plaintext highlighter-rouge">before.plusDays(getLong(365 * 10))</code> 를 종료 날짜/시각으로 사용하고 있습니다.</p>

<p>잘못된 부분을 눈치채셨나요?</p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">getLong(long bound)</code> 메서드에서는 양/음수 모두 반환될 수 있습니다. 즉, 종료 날짜/시각이 시작 날짜/시각 이전이 될 수 있는 것이죠.</p>

<p>이러한 문제로 인해서 테스트가 거의 50% 확률로 성공하고 있었습니다.</p>

<p>테스트 코드에서는 이러한 이슈들을 정말 조심해야 합니다. 테스트가 성공하여 마음 놓고 배포했는데 장애가 발생할 수 있으니까요.</p>

<p>그래서, 반환되는 랜덤 Long 값에 절댓값을 붙여 문제를 간단하게 해결할 수 있었습니다.</p>

<p><code class="language-plaintext highlighter-rouge">before.plusDays(getLong(365 * 10))</code> → <code class="language-plaintext highlighter-rouge">before.plusDays(Math.abs(getLong(365 * 10)))</code></p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230504_2.png?raw=true" width="250" height="500" /></p>

<p><br /></p>

<h3 id="db---조회-결과-없는-경우--unique-key-중복">DB - 조회 결과 없는 경우 &amp; Unique Key 중복</h3>

<p>특정 테스트 클래스에서 해당 두 경우의 예외가 발생했습니다.</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230504_3.png?raw=true" /></p>

<p>위 이미지에서 보이는 실패하는 클래스의 메서드들은 모두 @BeforeEach 메서드에서 예외가 발생했습니다.</p>

<p>그리고, 빨간색 네모 박스로 표시한 첫 메서드는 <code class="language-plaintext highlighter-rouge">java.util.NoSuchElementException: No value present at java.util.Optional.get(Optional.java:135)</code> 예외가 발생했고,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@BeforeEach</span>
<span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    
    <span class="nc">SaleRecord</span> <span class="n">saleRecord</span> <span class="o">=</span> <span class="n">saleRecordRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span>
        <span class="k">new</span> <span class="nf">SaleRecord</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span>
	    			   <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span>
	    	 	   	   <span class="mi">2L</span><span class="o">,</span>
	    			   <span class="mi">3L</span><span class="o">,</span>
	    			   <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span>
	    			   <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span>
	    			   <span class="kc">null</span><span class="o">,</span>
	    			   <span class="kc">null</span><span class="o">,</span>
	    			   <span class="kc">null</span><span class="o">));</span>

    <span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
    <span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>

    <span class="nc">SaleRecord</span> <span class="n">savedSaleRecord</span> <span class="o">=</span> <span class="n">saleRecordRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">).</span><span class="na">get</span><span class="o">();</span> <span class="c1">// here</span>

    <span class="c1">// ..</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>이후 메서드들은 모두  <code class="language-plaintext highlighter-rouge">Caused by: java.sql.SQLException: Duplicate entry 'saleNumber' for key 'uk_sale_number’</code> 예외가 발생하였습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@BeforeEach</span>
<span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    
    <span class="nc">SaleRecord</span> <span class="n">saleRecord</span> <span class="o">=</span> <span class="n">saleRecordRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span>
        <span class="k">new</span> <span class="nf">SaleRecord</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span>
        <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span>
        <span class="mi">2L</span><span class="o">,</span>
        <span class="mi">3L</span><span class="o">,</span>
        <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span>
        <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span>
        <span class="kc">null</span><span class="o">,</span>
        <span class="kc">null</span><span class="o">,</span>
        <span class="kc">null</span><span class="o">));</span> <span class="c1">// here</span>

    <span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
    <span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>

    <span class="nc">SaleRecord</span> <span class="n">savedSaleRecord</span> <span class="o">=</span> <span class="n">saleRecordRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>

    <span class="c1">// ..</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>이러한 결과를 보고  테스트 실행 중에 다른 테스트에 의해 영속성 컨텍스트가 비워지거나 DB 초기화가 이루어질 수 있다는 의심을 하게 되었습니다.</p>

<p>찾아보니, Spring Framework는 여러 단위 테스트를 한꺼번에 수행할 때, default로 컨텍스트를 재사용한다고 합니다.</p>

<p><a href="https://stackoverflow.com/questions/44180815/can-spring-boot-test-classes-reuse-application-context-for-faster-test-run">Can Spring Boot test classes reuse application context for faster test run?</a></p>

<p>또한, Unique Key 중복 데이터 insert 예외가 발생하는 것을 보고 <code class="language-plaintext highlighter-rouge">@Transactional</code> 어노테이션이 존재하지만 테스트 메서드 간 격리가 잘 되고 있지 않음을 알 수 있었습니다.</p>

<p>그래서 우선 테스트 간 격리를 시키기 위해 data.sql에 있는 init data를 제외한 데이터들을 각 테스트 메서드 수행 후 제거하고자 했습니다.</p>

<p>앞서 포스팅에서 다루었던 방법 중 <code class="language-plaintext highlighter-rouge">TestExecutionListener</code>를 사용하는 방법을 택했습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DBTestExecutionListener</span> <span class="kd">extends</span> <span class="nc">AbstractTestExecutionListener</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="no">TRUNCATED_TABLES</span> <span class="o">=</span> <span class="nc">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">"order"</span><span class="o">,</span> <span class="s">"sales"</span><span class="o">,</span> <span class="s">"sales_record"</span><span class="o">);</span> <span class="c1">// .. </span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">getOrder</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">4001</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeTestClass</span><span class="o">(</span><span class="nc">TestContext</span> <span class="n">testContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"DBCleanerTestExecutionListener beforeTestClass() Started .. "</span><span class="o">);</span>
        <span class="kd">final</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span> <span class="o">=</span> <span class="n">testContext</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">().</span><span class="na">getBean</span><span class="o">(</span><span class="nc">JdbcTemplate</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">useTestDatabase</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">);</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"DBCleanerTestExecutionListener beforeTestClass() Finished .. "</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">useTestDatabase</span><span class="o">(</span><span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">execute</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">,</span> <span class="s">"use test;"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterTestMethod</span><span class="o">(</span><span class="nc">TestContext</span> <span class="n">testContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"DBCleanerTestExecutionListener afterTestMethod() Started .. "</span><span class="o">);</span>
        <span class="kd">final</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span> <span class="o">=</span> <span class="n">testContext</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">().</span><span class="na">getBean</span><span class="o">(</span><span class="nc">JdbcTemplate</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">truncateTables</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">);</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"DBCleanerTestExecutionListener afterTestMethod() Finished .. "</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">truncateTables</span><span class="o">(</span><span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">execute</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">,</span> <span class="s">"SET foreign_key_checks=0;"</span><span class="o">);</span>
        <span class="no">TRUNCATED_TABLES</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">execute</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">,</span> <span class="s">"DELETE FROM "</span> <span class="o">+</span> <span class="n">t</span> <span class="o">+</span> <span class="s">";"</span><span class="o">));</span>
        <span class="n">execute</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">,</span> <span class="s">"SET foreign_key_checks=1;"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">,</span> <span class="nc">String</span> <span class="n">query</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>내부적으로 실행되는 기본적인 <code class="language-plaintext highlighter-rouge">TestExecutionListener</code> 들은 다양하게 있는데, 그 중 테스트 메서드에 <code class="language-plaintext highlighter-rouge">@Transactional</code> 어노테이션이 존재하는 경우 롤백을 시켜주는 등의 처리를 해주는 <code class="language-plaintext highlighter-rouge">TransactionalTestExecutionListener</code> 가 있습니다.</p>

<p>아래에는 해당 클래스 일부를 캡처한 이미지입니다. <code class="language-plaintext highlighter-rouge">getOrder()</code> 메서드에서 4000을 반환하고 있는데, <code class="language-plaintext highlighter-rouge">TestExecutionListener</code> 간 실행 순서를 뜻합니다. (높을수록 후순서)</p>

<p>커스텀 <code class="language-plaintext highlighter-rouge">TestExecutionListener</code>인 <code class="language-plaintext highlighter-rouge">DBTestExecutionListener</code>의 <code class="language-plaintext highlighter-rouge">getOrder()</code> 메서드에서 4001을 반환하게 한 이유는 트랜잭션 롤백 이후에 처리되도록 하기 위한 의도였습니다.</p>

<p>(하지만 어째서 인지 실제 실행된 로그를 보면 의도대로 잘 동작하지는 않습니다. 정확한 내부적인 구조는 점차 분석해볼 필요가 있을 것 같습니다.)</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230504_4.png?raw=true" /></p>

<p><br /></p>

<p>또한, 이를 테스트 전역에 적용하려면 resources 디렉토리에 <code class="language-plaintext highlighter-rouge">META-INF/spring.factories</code> 파일을 생성하여 다음과 같이 작성해주어야 합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.springframework.test.context.TestExecutionListener=\
com.hrp.config.DBTestExecutionListener
</code></pre></div></div>

<p><br /></p>

<h3 id="db---no-database-selected">DB - No database selected?</h3>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230504_5.png?raw=true" /></p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230504_6.png?raw=true" /></p>

<p><br /></p>

<p>에러 중 다른 하나는 특정 테스트 클래스 내 하나의 테스트 메서드가 실패를 하고 있었는데, 뜬금없이 선택할 데이터베이스(스키마)가 없다고 합니다.</p>

<p>Junit이 기본적으로 테스트 간 격리를 보장하기 위해 <code class="language-plaintext highlighter-rouge">@Test</code> 가 달린 메서드 마다 테스트 인스턴스를 새로 생성합니다.</p>

<p>설정이 포함된 무거운 객체(ex. DataSource)들은 어플리케이션 컨텍스트 내에서 공유된다고 알고 있었습니다. 그런데 <code class="language-plaintext highlighter-rouge">No database selected</code> 문제가 발생하여 위에서 잠깐 언급했었던 다른 테스트에 의한 영향일 수 있겠다고 생각했습니다.</p>

<p>(application.yml에 정의된 datasource에 database 설정이 없다.)</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mariadb://localhost:3306</span>
    <span class="c1"># ..</span>
</code></pre></div></div>

<p><br /></p>

<p>그래서, 이전에 추가한 <code class="language-plaintext highlighter-rouge">TestExecutionListener</code>에 test 스키마를 생성하는 로직을 하나 추가하였습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DBTestExecutionListener</span> <span class="kd">extends</span> <span class="nc">AbstractTestExecutionListener</span> <span class="o">{</span>
    
    <span class="c1">// ..</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">createTestDatabase</span><span class="o">(</span><span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">"create schema test;"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeTestClass</span><span class="o">(</span><span class="nc">TestContext</span> <span class="n">testContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"DBCleanerTestExecutionListener beforeTestClass() Started .. "</span><span class="o">);</span>
        <span class="kd">final</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span> <span class="o">=</span> <span class="n">testContext</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">().</span><span class="na">getBean</span><span class="o">(</span><span class="nc">JdbcTemplate</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">createTestDatabase</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">);</span> <span class="c1">// added</span>
        <span class="n">useTestDatabase</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">);</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"DBCleanerTestExecutionListener beforeTestClass() Finished .. "</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">useTestDatabase</span><span class="o">(</span><span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">execute</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">,</span> <span class="s">"use test;"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// ..</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>이렇게 여러 수정 사항을 거친 결과, 다음과 같이 모든 테스트가 통과하는 모습을 확인할 수 있습니다.</p>

<p><br /></p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230504_7.png?raw=true" width="250" height="500" /></p>

<p><br /></p>

<p>이렇게 모두 해결이 된 것일까요?</p>

<p>그랬으면 좋겠지만, 아직 문제가 남아있었습니다. 테스트 유지보수에 대한 찐 마지막 포스팅으로 찾아뵙도록 하겠습니다! :)</p>]]></content><author><name>Taeho Kim</name></author><category term="테스트" /><category term="junit" /><category term="test" /><category term="spring" /><summary type="html"><![CDATA[이전 포스팅에 이어 테스트 코드 유지보수를 이어나가 보겠습니다.]]></summary></entry><entry><title type="html">테스트 코드 유지보수 해보기 2</title><link href="https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/05/01/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%BD%94%EB%93%9C_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98-2.html" rel="alternate" type="text/html" title="테스트 코드 유지보수 해보기 2" /><published>2023-05-01T00:00:00+00:00</published><updated>2023-05-01T00:00:00+00:00</updated><id>https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/05/01/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%BD%94%EB%93%9C_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%202</id><content type="html" xml:base="https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/05/01/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%BD%94%EB%93%9C_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98-2.html"><![CDATA[<p>이전 포스팅에 이어 테스트 코드 유지보수를 이어나가 보겠습니다.</p>

<p>이전 포스팅에서 적용한 것들은 다음과 같습니다.</p>

<ul>
  <li>test datasource 설정</li>
  <li><code class="language-plaintext highlighter-rouge">schema.sql</code>, <code class="language-plaintext highlighter-rouge">data.sql</code> 추가</li>
</ul>

<p>이렇게 했을 때, 마지막 테스트 수행 결과는 다음과 같았습니다.</p>

<p><br /></p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230501_1.png?raw=true" width="250" height="500" /></p>

<p><br /></p>

<p>실패하는 테스트 케이스의 원인은 다음과 같았습니다.</p>

<ul>
  <li>테스트 예상 결과가 다른 경우 (expect ≠ result)</li>
  <li>테스트 실행 중 에러가 발생한 경우</li>
</ul>

<p>각 케이스 별로 살펴보겠습니다.</p>

<p><br /></p>

<h2 id="테스트-예상-결과가-다른-경우">테스트 예상 결과가 다른 경우</h2>

<p>기존에 작성했던 테스트 결과 대로 동작하지 않는 경우입니다.</p>

<p>해당 케이스들 중 첫번째는 특정 기능(ex. 알림)에 대한 테스트 케이스들이었습니다.</p>

<p>주문에 대한 알람 기능을 예로 들었을 때, 기존에 개발된 형상은 고객이 주문을 하면 고객도 알림을 받는 형태였고, 테스트 코드의 예상 결과는 고객을 제외한 대상자들이 알림을 받아야 했습니다.</p>

<p>이 경우는 기존에 개발된 기능들이 잘못 동작하고 있는지 아니면 기존에 작성된 테스트 코드의 결과가 잘못 작성되었는지 확인이 필요하였습니다.</p>

<p>해당 기능에 대한 기획서를 확인해본 결과, 테스트 코드의 예상 결과가 옳다는 것을 알 수 있었습니다.</p>

<p>그래서 기획서에 작성된 요구사항을 바탕으로 기존 기능들을 개선하였습니다.</p>

<p><br /></p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230501_2.png?raw=true" width="250" height="500" /></p>

<p><br /></p>

<p>나머지 통과하지 못하는 케이스는 JPA의 잘못된 사용 사례입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="nd">@Rollback</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_saleRecordIsPresent_when_create</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">SaleRecord</span> <span class="n">saleRecord</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SaleRecord</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span>
                                           <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span>
                                           <span class="mi">2L</span><span class="o">,</span>
                                           <span class="mi">3L</span><span class="o">,</span>
                                           <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span>
                                           <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span>
                                           <span class="kc">null</span><span class="o">,</span>
                                           <span class="kc">null</span><span class="o">,</span>
                                           <span class="kc">null</span><span class="o">);</span>

    <span class="n">saleRecordRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">saleRecord</span><span class="o">);</span>

    <span class="nc">Long</span> <span class="n">id</span> <span class="o">=</span> <span class="n">saleRecord</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>

    <span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span> <span class="c1">// flush가 없다</span>

    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">SaleRecord</span><span class="o">&gt;</span> <span class="n">byId</span> <span class="o">=</span> <span class="n">saleRecordRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>

    <span class="nc">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="n">byId</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>보시는 바와 같이, 코드에서 repository를 통해 <code class="language-plaintext highlighter-rouge">save()</code> 후 flush를 하지 않고 영속성 컨텍스트를 <code class="language-plaintext highlighter-rouge">clear()</code> 하고 있습니다.</p>

<p><code class="language-plaintext highlighter-rouge">flush()</code>를 해줘야 영속성 컨텍스트의 변경사항이 반영될텐데, 해당 부분을 빠트린 케이스입니다.</p>

<p>이 부분을 추가해주니 해당 테스트 케이스는 통과했습니다.</p>

<p><br /></p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230501_3.png?raw=true" width="250" height="500" /></p>

<p><br /></p>

<p>여기까지가 테스트 결과가 예상 결과와 다른 테스트 케이스를 개선한 내용이었습니다.</p>

<p>해당 분량이 다소 많을 것 같아 다음 포스팅에서 진행하겠습니다 :)</p>]]></content><author><name>Taeho Kim</name></author><category term="테스트" /><category term="junit" /><category term="test" /><category term="spring" /><summary type="html"><![CDATA[이전 포스팅에 이어 테스트 코드 유지보수를 이어나가 보겠습니다.]]></summary></entry><entry><title type="html">테스트 코드 유지보수 해보기 1</title><link href="https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/04/26/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%BD%94%EB%93%9C_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98-1.html" rel="alternate" type="text/html" title="테스트 코드 유지보수 해보기 1" /><published>2023-04-26T00:00:00+00:00</published><updated>2023-04-26T00:00:00+00:00</updated><id>https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/04/26/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%BD%94%EB%93%9C_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%201</id><content type="html" xml:base="https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/04/26/%ED%85%8C%EC%8A%A4%ED%8A%B8_%EC%BD%94%EB%93%9C_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98-1.html"><![CDATA[<h2 id="배경">배경</h2>

<p>저희 조직에서는 테스트 코드를 잘 작성하지 못하고 있었습니다.</p>

<p>저는 그러한 이유에는 크게 3가지가 있다고 생각했습니다.</p>

<ul>
  <li>시간 부족</li>
  <li>테스트 코드 작성에 대한 이해</li>
  <li>테스트 코드의 관리 상태</li>
</ul>

<p>수 차례의 회고를 진행하며 팀원들에게 테스트 코드에 대한 중요성을 어필하였고, 관련 내용에 대해 별도로 논의를 거쳐왔습니다.</p>

<p>그 과정에서 3가지 중 시간 부족, 테스트 코드 작성에 대한 이해 항목은 어느 정도 해결할 수 있었습니다.</p>

<p>사실 마지막 항목인 테스트 코드의 관리 상태가 가장 어려운 문제였습니다.</p>

<p>테스트 코드는 결국 우리가 개발한 코드가 정상적으로 동작하는지 확인하는 용도가 가장 큰데, 기존에 존재하는 테스트 코드들이 환경이나 요구 사항 변동 등에 의해 정상적으로 동작하고 있지 않았습니다.</p>

<p>개인적으로 이 문제를 해결하고 싶었고, 빠르게 테스트 코드를 도입하고 싶었기에 짬을 내서 조금씩 개선해보자 마음 먹었습니다.</p>

<p><br /></p>

<h2 id="진행">진행</h2>

<h3 id="동작하지-않는-테스트">동작하지 않는 테스트</h3>

<p>첫번째로 환경 차이가 존재했습니다.</p>

<p>test에 대한 DB 설정을 다음과 같이 설정했는데, 구성원의 로컬 환경 마다 동일한지 보장이 안되었습니다.</p>

<p><code class="language-plaintext highlighter-rouge">spring.datasource.url=jdbc:mariadb://localhost:3306/test</code></p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230426_1.png?raw=true" alt="테스트 결과 전" /></p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230426_2.png?raw=true" alt="테스트 결과 후" /></p>

<p>제 경우는 test 스키마가 사전에 생성되어 있지 않아서 문제가 있었습니다.</p>

<p>해당 프로젝트는 멀티 모듈로 구성되어 있는데, 우선 작은 모듈은 임시로 test 스키마를 로컬에 생성하여 해결할 수 있었습니다.</p>

<p><br /></p>

<p>테스트가 가장 많은 모듈에서는 스키마를 생성해주었는데도 불구하고, 많은 테스트에 에러가 발생하고 있었습니다.</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230426_3.png?raw=true" alt="테스트 결과" /></p>

<p>이렇게나 많은 테스트에서 문제가 발생하는 것을 보면 어떤 이유인지 예상이 되시나요?</p>

<p>맞습니다. 바로 테이블이 생성되어 있지 않아서 문제가 발생했습니다.</p>

<p><code class="language-plaintext highlighter-rouge">spring.jpa.hibernate.ddl-auto=create</code> 상태인데도 말이죠.</p>

<p><br /></p>

<p>여기서 테스트 환경에 대한 중요성을 굉장히 크게 느꼈습니다. 조직에서 테스트 환경을 동일하게 구축하지 않는다면 위와 같은 상황이 벌어질 수 있으니까요.</p>

<p>확인해보니 구성원들이 로컬에서 테스트용으로 사용하는 스키마명도 제각기 달랐습니다.</p>

<p>팀 규모가 크지 않다면 팀 내부적으로 환경을 구축해도 되겠지만, 테스트 코드는 협업하는 팀에서도 실행시킬 수 있고 이후 다루는 내용이지만 파이프라인에서도 동작이 가능해야 한다고 생각합니다.</p>

<p><br /></p>

<p>그리고, 테스트 간 격리도 매우 중요한 문제입니다.</p>

<p>테스트 격리를 위한 방법은 다양합니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@BeforeEach</code>, <code class="language-plaintext highlighter-rouge">@AfterEach</code> 등 junit에서 제공하는 어노테이션 이용
    <ul>
      <li>
        <p>어플리케이션 코드로 인스턴스나 데이터를 핸들링 할 수 있습니다.</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// example</span>
  <span class="kd">private</span> <span class="nc">MarketRepository</span> <span class="n">marketRepository</span><span class="o">;</span>
        
  <span class="nd">@BeforeEach</span>
  <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
  	<span class="nc">Market</span> <span class="n">market</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Market</span><span class="o">();</span>
  	<span class="n">marketRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">market</span><span class="o">);</span>
  <span class="o">}</span>
        
  <span class="nd">@AfterEach</span>
  <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
  	<span class="n">marketRepository</span><span class="o">.</span><span class="na">deleteAll</span><span class="o">();</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@Sql</code> 어노테이션을 통해 <code class="language-plaintext highlighter-rouge">.sql</code> 실행</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// example</span>
    
  <span class="nd">@Test</span>
  <span class="nd">@Sql</span><span class="o">(</span><span class="s">"./clean.sql"</span><span class="o">)</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
  	<span class="nc">Long</span> <span class="n">ids</span> <span class="o">=</span> <span class="n">marketRepository</span><span class="o">.</span><span class="na">findIdsByType</span><span class="o">(</span><span class="nc">MarketType</span><span class="o">.</span><span class="na">ONLINE</span><span class="o">);</span>
  	<span class="n">marketRepository</span><span class="o">.</span><span class="na">updateByIds</span><span class="o">(</span><span class="n">ids</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@Transactional</code> 어노테이션이 제공하는 자동 롤백 기능
    <ul>
      <li>
        <p>테스트 클래스에 @Transactional 어노테이션을 선언하면, 테스트 패키지에서는 자동으로 데이터는 롤백 됩니다.</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@SpringBootTest</span>
  <span class="nd">@Transactional</span>
  <span class="kd">class</span> <span class="nc">marketServiceTest</span> <span class="o">{</span>
        
  	<span class="nd">@Autowired</span>
  	<span class="kd">private</span> <span class="nc">OrderService</span> <span class="n">orderService</span><span class="o">;</span>
        
  	<span class="nd">@Autowired</span>
  	<span class="kd">private</span> <span class="nc">MarketService</span> <span class="n">marketService</span><span class="o">;</span>
        
  	<span class="nd">@Test</span>
  	<span class="kt">void</span> <span class="nf">should_marketUpdated_when_orderCreated</span><span class="o">()</span> <span class="o">{</span>
  		<span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="nc">Order</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
        
  		<span class="c1">// ..</span>
  		<span class="c1">// 종료 후 롤백</span>
  	<span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TestExecutionListener</code> 사용
    <ul>
      <li><code class="language-plaintext highlighter-rouge">AbstractTestExecutionListener</code> 를 상속하여 구현한다면, 테스트 클래스/메서드의 동작 전/후에 원하는 동작을 추가할 수 있습니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">data.sql</code>, <code class="language-plaintext highlighter-rouge">schema.sql</code> 스크립트를 통한 초기화
    <ul>
      <li>위에서 다룬 방법들은 대부분 후처리에 가까운데, 이 방법은 스프링 애플리케이션이 시작될 때 데이터베이스에 스키마와 데이터를 초기화하는 방법입니다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p>데이터에 대한 정합성이 맞지 않을 수 있다면 테스트를 마음 놓고 작성하지 못할 뿐더러, 작성한 테스트 코드를 신뢰할 수도 없겠죠?</p>

<p><br /></p>

<p>아까 보여드렸던 실패 케이스 대부분은 테이블이 존재하지 않아서 동작하지 않는 경우였습니다.</p>

<p>우선, 테스트 패키지에서 스프링 애플리케이션이 실행될 때 마다 데이터베이스를 스크립트 기반으로 초기화하는 방법을 택했습니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">spring.sql.init.mode=always</code> 설정
    <ul>
      <li><code class="language-plaintext highlighter-rouge">spring.jpa.hibernate.ddl-auto=none</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">data.sql</code>, <code class="language-plaintext highlighter-rouge">schema.sql</code> 파일 <code class="language-plaintext highlighter-rouge">resources</code> 디렉토리에 생성</li>
</ul>

<p>환경 마다 <code class="language-plaintext highlighter-rouge">test</code> 스키마가 없을 수 있기에 <code class="language-plaintext highlighter-rouge">schema.sql</code> 스크립트를 다음과 같이 작성하였습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">DROP</span> <span class="no">DATABASE</span> <span class="no">IF</span> <span class="no">EXISTS</span> <span class="err">`</span><span class="n">test</span><span class="err">`</span><span class="o">;</span>
<span class="no">CREATE</span> <span class="no">SCHEMA</span> <span class="err">`</span><span class="n">test</span><span class="err">`</span><span class="o">;</span>
<span class="no">USE</span> <span class="err">`</span><span class="n">test</span><span class="err">`</span><span class="o">;</span>

<span class="o">--</span> <span class="nc">Create</span> <span class="n">tables</span> <span class="o">..</span>
</code></pre></div></div>

<p>이렇게 초기 스키마, 테이블, 데이터 설정만으로 많이 개선 되었음을 확인할 수 있습니다.</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230426_4.png?raw=true" alt="테스트 결과" /></p>

<p><br /></p>

<p>아직 갈 길이 멀어보이는데, 초반에 보여드렸던 상태에 비해 많이 양호해졌습니다.</p>

<p>다음 포스팅에서 나머지 테스트들에 대한 개선 과정을 이어가 보도록 하겠습니다.</p>]]></content><author><name>Taeho Kim</name></author><category term="테스트" /><category term="junit" /><category term="test" /><category term="spring" /><summary type="html"><![CDATA[배경]]></summary></entry><entry><title type="html">간단한 조회 서비스 로직 리팩토링</title><link href="https://ting-kim.github.io/%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81/2023/04/25/%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%A1%B0%ED%9A%8C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A1%9C%EC%A7%81-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81.html" rel="alternate" type="text/html" title="간단한 조회 서비스 로직 리팩토링" /><published>2023-04-25T00:00:00+00:00</published><updated>2023-04-25T00:00:00+00:00</updated><id>https://ting-kim.github.io/%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81/2023/04/25/%EA%B0%84%EB%8B%A8%ED%95%9C%20%EC%A1%B0%ED%9A%8C%20%EC%84%9C%EB%B9%84%EC%8A%A4%20%EB%A1%9C%EC%A7%81%20%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81</id><content type="html" xml:base="https://ting-kim.github.io/%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81/2023/04/25/%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%A1%B0%ED%9A%8C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A1%9C%EC%A7%81-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81.html"><![CDATA[<h3 id="배경">배경</h3>

<p>오늘 함께 일하시는 FE 분께서 API 응답 데이터가 요구사항과 다르다고 확인을 부탁하셨습니다.</p>

<p>제가 작업했던 부분은 아니었으나 해당 부분을 구현하셨던 팀원 분께서 회의 일정이 있어 제가 대응을 하게 되었습니다.</p>

<p><br /></p>

<p>요구사항 자체는 간단했습니다. 주문 상태가 <code class="language-plaintext highlighter-rouge">WAIT</code> 인 데이터가 포함되면 안되었기에 해당 부분만 필터링을 추가하면 되는 작업이었습니다.</p>

<p>해당 기능에 대한 코드입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Before</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderModel</span><span class="o">&gt;</span> <span class="nf">getOrderModels</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Market</span><span class="o">&gt;</span> <span class="n">markets</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">urgent</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Market</span><span class="o">&gt;</span> <span class="n">marketsById</span> <span class="o">=</span> <span class="n">markets</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                                           <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toMap</span><span class="o">(</span><span class="nl">Market:</span><span class="o">:</span><span class="n">getId</span><span class="o">,</span> <span class="nc">Function</span><span class="o">.</span><span class="na">identity</span><span class="o">()));</span>

    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">orders</span> <span class="o">=</span> <span class="n">getWaitingOrders</span><span class="o">(</span><span class="n">marketsById</span><span class="o">.</span><span class="na">keySet</span><span class="o">());</span>

    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderModel</span><span class="o">&gt;</span> <span class="nc">OrderModels</span> <span class="o">=</span> <span class="nc">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Order</span> <span class="n">order</span> <span class="o">:</span> <span class="n">orders</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Long</span> <span class="n">ownerId</span> <span class="o">=</span> <span class="n">marketsById</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getMarketId</span><span class="o">()).</span><span class="na">getOwnerId</span><span class="o">();</span>
        <span class="nc">OrderModels</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">OrderModel</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getMarketId</span><span class="o">(),</span>
                                       <span class="n">order</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span>
                                       <span class="n">order</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(),</span>
                                       <span class="n">order</span><span class="o">.</span><span class="na">getCreatedDateTime</span><span class="o">(),</span>
                                       <span class="n">order</span><span class="o">.</span><span class="na">getPlace</span><span class="o">(),</span>
                                       <span class="n">order</span><span class="o">.</span><span class="na">getStatus</span><span class="o">(),</span>
                                       <span class="n">order</span><span class="o">.</span><span class="na">getMemberId</span><span class="o">(),</span>
                                       <span class="n">ownerId</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">urgent</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// here</span>
        <span class="nc">OrderModels</span><span class="o">.</span><span class="na">removeIf</span><span class="o">(</span><span class="n">order</span> <span class="o">-&gt;</span> <span class="n">order</span><span class="o">.</span><span class="na">getStatus</span><span class="o">()</span> <span class="o">!=</span> <span class="nc">OrderStatus</span><span class="o">.</span><span class="na">WAIT</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="nc">OrderModels</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                      <span class="o">.</span><span class="na">sorted</span><span class="o">(</span><span class="nc">Comparator</span><span class="o">.</span><span class="na">comparing</span><span class="o">(</span><span class="nl">OrderModel:</span><span class="o">:</span><span class="n">getId</span><span class="o">))</span>
                      <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="no">READ_SIZE</span><span class="o">)</span>
                      <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="nf">getWaitingOrders</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">marketIds</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">orderRepository</span><span class="o">.</span><span class="na">findWatingOrdersByMarketIds</span><span class="o">(</span><span class="n">marketIds</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>코드를 보시면 <code class="language-plaintext highlighter-rouge">if (urgent) {}</code> 부분에서는 <code class="language-plaintext highlighter-rouge">WAIT</code> 상태인 데이터를 필터링하고 있으나, 그 외 상황에서는 <code class="language-plaintext highlighter-rouge">WAIT</code> 상태 데이터가 포함되고 있었습니다.</p>

<p><br /></p>

<p>해당 부분을 간단히 수정할 수 있었지만, 전반적으로 가독성을 개선하고, <code class="language-plaintext highlighter-rouge">Order → OrderModel</code> 로의 매핑과 정렬 작업이 함께 이루어지면 좋을 것 같다는 생각이 들었습니다.</p>

<p>그래서 <code class="language-plaintext highlighter-rouge">OrderStatus</code> 필터링에 대한 조건을 메서드화 하고, 매핑과 정렬 작업을 하나의 Stream으로 작성하였습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// After</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderModel</span><span class="o">&gt;</span> <span class="nf">getNotAcceptedOrderModels</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Market</span><span class="o">&gt;</span> <span class="n">markets</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">urgent</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Market</span><span class="o">&gt;</span> <span class="n">marketsById</span> <span class="o">=</span> <span class="n">markets</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                                           <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toMap</span><span class="o">(</span><span class="nl">Market:</span><span class="o">:</span><span class="n">getId</span><span class="o">,</span> <span class="nc">Function</span><span class="o">.</span><span class="na">identity</span><span class="o">()));</span>

    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">orders</span> <span class="o">=</span> <span class="n">getWaitingOrders</span><span class="o">(</span><span class="n">marketsById</span><span class="o">.</span><span class="na">keySet</span><span class="o">());</span>

    <span class="k">return</span> <span class="n">orders</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                 <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">order</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">OrderModel</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getMarketId</span><span class="o">(),</span>
                                              <span class="n">order</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span>
                                              <span class="n">order</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(),</span>
                                              <span class="n">order</span><span class="o">.</span><span class="na">getCreatedDateTime</span><span class="o">(),</span>
                                              <span class="n">order</span><span class="o">.</span><span class="na">getPlace</span><span class="o">(),</span>
                                              <span class="n">order</span><span class="o">.</span><span class="na">getStatus</span><span class="o">(),</span>
                                              <span class="n">order</span><span class="o">.</span><span class="na">getMemberId</span><span class="o">(),</span>
                                              <span class="n">marketsById</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getMarketId</span><span class="o">())</span> <span class="o">?</span>
                                              <span class="n">marketsById</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getMarketId</span><span class="o">()).</span><span class="na">getOwnerId</span><span class="o">()</span> <span class="o">:</span>
                                              <span class="kc">null</span><span class="o">))</span>
                 <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">order</span> <span class="o">-&gt;</span> <span class="n">inTargetStatus</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="n">urgent</span><span class="o">))</span>
                 <span class="o">.</span><span class="na">sorted</span><span class="o">(</span><span class="nc">Comparator</span><span class="o">.</span><span class="na">comparing</span><span class="o">(</span><span class="nl">OrderModel:</span><span class="o">:</span><span class="n">getId</span><span class="o">))</span>
                 <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="no">READ_SIZE</span><span class="o">)</span>
                 <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="nf">getWaitingOrders</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">marketIds</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">orderRepository</span><span class="o">.</span><span class="na">findWatingOrdersByMarketIds</span><span class="o">(</span><span class="n">marketIds</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">inTargetStatus</span><span class="o">(</span><span class="nc">OrderModel</span> <span class="n">order</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">urgent</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">urgent</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">order</span><span class="o">.</span><span class="na">getStatus</span><span class="o">()</span> <span class="o">==</span> <span class="nc">OrderStatus</span><span class="o">.</span><span class="na">TIMEOUT</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">order</span><span class="o">.</span><span class="na">getStatus</span><span class="o">()</span> <span class="o">!=</span> <span class="nc">OrderStatus</span><span class="o">.</span><span class="na">ACCEPTED</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>리팩토링 후 코드입니다.</p>

<p><br /></p>

<p>Stream이 너무 길어져도 좋지 않을 수 있지만, 반복문이나 Stream이 파편화 되어있으면 관리하기가 어려울 수 있을 것 같습니다.</p>

<p>이를 이용하면 어느 정도는 가독성이 향상될 수 있다고 생각합니다 :)</p>]]></content><author><name>Taeho Kim</name></author><category term="리팩토링" /><category term="java" /><category term="refactoring" /><category term="stream" /><summary type="html"><![CDATA[배경]]></summary></entry><entry><title type="html">테스트 파이프라인 구축 (Bitbucket, Teams 노티)</title><link href="https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/04/23/%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EA%B5%AC%EC%B6%95.html" rel="alternate" type="text/html" title="테스트 파이프라인 구축 (Bitbucket, Teams 노티)" /><published>2023-04-23T00:00:00+00:00</published><updated>2023-04-23T00:00:00+00:00</updated><id>https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/04/23/%ED%85%8C%EC%8A%A4%ED%8A%B8%20%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8%20%EA%B5%AC%EC%B6%95</id><content type="html" xml:base="https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/04/23/%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EA%B5%AC%EC%B6%95.html"><![CDATA[<h3 id="배경">배경</h3>

<p>저희 팀은 API, 화면 개발 모두 필요한 경우에는 BE(백엔드)와 FE(프론트엔드) 작업담당자가 REST API Request, Response 모델에 대해서 사전에 논의합니다.</p>

<p>논의한 내용을 바탕으로 각자 파트에서 작업을 진행하게 되죠. API 개발이 완료된 후에는 보통 DV 환경이 타 버전에 대한 검증으로 사용 중인 상황이 많기 때문에, 로컬에서 DV 환경에 DB를 바라보는 profile로 API 서버를 구동합니다.</p>

<p>이러한 환경에서 업무를 진행할 때, API 개발이 완료되어서 FE에 API 명세와 작업 브랜치를 전달하면 종종 문제가 발생합니다.</p>

<ul>
  <li>API 에러 상황
    <ul>
      <li>Http status 5xx</li>
      <li>API 명세와 상이한 Request/Response</li>
    </ul>
  </li>
  <li>개발된 기능 외 기존 기능에 문제 발생
    <ul>
      <li>테스트 코드 실패 케이스 존재</li>
    </ul>
  </li>
  <li>빌드 에러</li>
</ul>

<p><br /></p>

<p>물론, API 개발 담당자가 모두 확인했으면 문제가 되지 않을 수 있을 것 같습니다. 하지만 구성원 마다 개발자 검증의 범위는 다를 수 있으며, 휴먼 에러는 어디에나 존재할 수 있다고 생각합니다.</p>

<p>(가끔 저도 협업하는 브랜치에서 코드를 내려받고 실행했을 때 빌드 에러를 종종 만나기도 했습니다. 유효하지 않은 import 구문이 존재한다던지.. .😅)</p>

<p>그리고 저희 조직에서 최근에 테스트 코드를 열심히 작성해보기로 했는데, 테스트 코드 유지 보수와 잘 사용하는 것도 하나의 이슈였습니다.</p>

<p>그래서, 커밋 될 때 마다 bitbucket pipeline에서 빌드 &amp; 테스트를 수행하고 결과를 Teams 메신저로 받을 수 있게 시도해보기로 했습니다.</p>

<p><br /></p>

<h3 id="테스트-환경">테스트 환경</h3>

<p>테스트 코드가 효용이 있으려면, 모든 환경에서 잘 수행되어야 합니다. 특히 각 개발자의 로컬 PC에서는 테스트 환경을 미리 알고 로컬에 데이터베이스 등을 설정해줄 수 있지만, 그렇게 각각 설정해야만 테스트가 수행된다면 파이프라인에 이를 적용하기는 어려울 것입니다.</p>

<p>그래서 기존에 테스트 시 <code class="language-plaintext highlighter-rouge">MariaDB</code>를 사용하도록 설정된 부분을 쉽게 사용할 수 있는 <code class="language-plaintext highlighter-rouge">H2Database</code>로 변경했습니다.</p>

<p><br /></p>

<h3 id="파이프라인">파이프라인</h3>

<p>파이프라인에 대해서는 ChatGPT의 도움을 굉장히 많이 받았습니다. 물론, 안되는 정보를 알려주기도 했지만 직접 파이프라인을 반복해서 테스트 해보고 Bitbucket 공식 문서를 포함한 정보들을 구글링해서 해결했습니다.</p>

<p>파이프라인 내에서 프로젝트 빌드 &amp; 테스트 실패 시 팀즈 알림을 전송하며, 스크립트 내용은 아래와 같습니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pipelines</span><span class="pi">:</span>
  <span class="na">default</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">step</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">Build and test for all other pull requests</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">maven:3.8.1-jdk-8</span>
        <span class="na">caches</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">maven</span>
        <span class="na">script</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">set -e</span>
          <span class="pi">-</span> <span class="s">mvn clean test</span>
        <span class="na">after-script</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">COMMIT_MESSAGE=`git log --format=%B -n 1 $BITBUCKET_COMMIT`</span>
          <span class="pi">-</span> <span class="s">COMMIT_AUTHOR=`git log -n 1 --format=format:'%an'`</span>
          <span class="pi">-</span> <span class="pi">|</span>
            <span class="s">if [ "$BITBUCKET_EXIT_CODE" -ne 0 ]; then</span>
              <span class="s"># Construct the notification message</span>
              <span class="s">PIPELINE_URL="${BITBUCKET_GIT_HTTP_ORIGIN%/}/pipelines/results/${BITBUCKET_BUILD_NUMBER}"</span>
              <span class="s">JSON_STRING='{"@type": "MessageCard","@context": "http://schema.org/extensions","themeColor": "FF0000","summary": "Maven test failed in Bitbucket Pipelines!","sections": [{"activityTitle": "Maven build or test failed! - '${COMMIT_MESSAGE}' ('${BITBUCKET_COMMIT}')","activitySubtitle": "Author: '${COMMIT_AUTHOR}'","activityImage": "https://www.gravatar.com/avatar/'${BITBUCKET_BUILD_COMMITTER_EMAIL_HASH}'?d=identicon","facts": [{"name": "Repository","value": "'${BITBUCKET_REPO_FULL_NAME}'"},{"name": "Branch","value": "'${BITBUCKET_BRANCH}'"},{"name": "Pipeline URL","value": "'${PIPELINE_URL}'"}]}]}'</span>

              <span class="s"># Send the notification to Microsoft Teams</span>
              <span class="s">curl -H "Content-Type: application/json" -d "$JSON_STRING" &lt;teams_webhook_url&gt;</span>
            <span class="s">else</span>
              <span class="s">echo Maven test succeed in Bitbucket Pipelines!</span>
            <span class="s">fi</span>
</code></pre></div></div>

<p>스크립트 내 <code class="language-plaintext highlighter-rouge">&lt;teams-webhook_url&gt;</code> 부분의 경우는 아래 링크를 참고하시고, webhook URL을 생성한 후 첨부하시면 되겠습니다.
<br />
<a href="https://learn.microsoft.com/ko-kr/azure/data-factory/how-to-send-notifications-to-teams?tabs=data-factory">Azure Data Factory 또는 Synapse Analytics 파이프라인에서 Microsoft Teams 채널로 알림 보내기</a></p>

<p><br /></p>

<p>적용 후, 빌드 &amp; 테스트 파이프라인이 정상적으로 작동하는 모습입니다.</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230423_1.png?raw=true" alt="Untitled" /></p>

<p>실패하면 이렇게 알림이 발생합니다.</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230423_2.png?raw=true" alt="Untitled" /></p>

<p><br /></p>

<p>이렇게 적용했더니, 최소 레벨의 휴먼 에러를 방지할 수 있었습니다.</p>

<p>해당 프로젝트에서는 빌드 &amp; 테스트 파이프라인을 비교적 쉽게 적용할 수 있었는데, 그 이유는 신규 프로젝트이며 테스트 코드가 많이 존재하지 않기도 하고, 무엇보다 테스트에 대한 격리가 잘 되어 있는 덕분이라고 생각합니다.</p>

<p>외부 의존성이 존재(ex. DB)하는 테스트에 대한 격리는 훨씬 더 고려할 부분이 많죠.</p>

<p><br /></p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230423_3.png?raw=true" alt="다른 사람이 고생을 떠안을 수 있다.." /></p>

<p>다른 사람이 고생을 떠안을 수 있다..</p>

<p>최근 김남윤님께서 스프링캠프 발표에서 “어디선가 해야 할 일을 빠트리거나 잘못 수행했다면, 그 일은 또 다른 곳으로 결국 흘러가게 된다” 라고 위 이미지와 함께 강조하시기도 했죠. (문구가 동일하진 않습니다. 생각나는 대로 적어서..)</p>

<p>항상 테스트 격리를 지키고자 노력해야 잘 동작하던 테스트가 돌아가지 않는 현상을 최대한 겪지 않을 수 있지 않을까요? :)</p>]]></content><author><name>Taeho Kim</name></author><category term="테스트" /><category term="pipeline" /><category term="test" /><category term="teams" /><summary type="html"><![CDATA[배경]]></summary></entry><entry><title type="html">JPA 엔티티 내 @Transient Bean 필드를 제거한 이유</title><link href="https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/04/22/JPA-%EC%97%94%ED%8B%B0%ED%8B%B0-Transient-%EB%B9%88-%ED%95%84%EB%93%9C-%EC%A0%9C%EA%B1%B0.html" rel="alternate" type="text/html" title="JPA 엔티티 내 @Transient Bean 필드를 제거한 이유" /><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><id>https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/04/22/JPA%20%EC%97%94%ED%8B%B0%ED%8B%B0%20Transient%20%EB%B9%88%20%ED%95%84%EB%93%9C%20%EC%A0%9C%EA%B1%B0</id><content type="html" xml:base="https://ting-kim.github.io/%ED%85%8C%EC%8A%A4%ED%8A%B8/2023/04/22/JPA-%EC%97%94%ED%8B%B0%ED%8B%B0-Transient-%EB%B9%88-%ED%95%84%EB%93%9C-%EC%A0%9C%EA%B1%B0.html"><![CDATA[<h3 id="배경">배경</h3>

<p>간단한 API를 개발하는 작업을 진행하고 있었습니다. 해당 기능에 대한 도메인 모델(JPA 엔티티) 로직은 이미 작성되어 있는 상태라서 추가 작업이 많이 필요하지 않았습니다. 그래서 해당 모델 로직을 그대로 사용했고, 필요한 web 코드와 도메인 서비스 코드를 작성했습니다.</p>

<p><br /></p>

<p>우선 개발 완료 후 Swagger 상으로 간단한 호출을 해봤는데 문제가 있었습니다. 이유는 도메인 JPA 엔티티 내부에 외부 의존성을 가지는 <code class="language-plaintext highlighter-rouge">@Transient</code> 필드가 존재했습니다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>

	<span class="o">..</span>
	
	
	<span class="nd">@Transient</span>
	<span class="nd">@Inject</span>
  	<span class="nd">@Getter</span><span class="o">(</span><span class="nc">AccessLevel</span><span class="o">.</span><span class="na">NONE</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">DomainEventListener</span> <span class="n">domainEventListener</span><span class="o">;</span> <span class="c1">// is null</span>
	
	<span class="nd">@Transient</span>
	<span class="nd">@Inject</span>
  	<span class="nd">@Getter</span><span class="o">(</span><span class="nc">AccessLevel</span><span class="o">.</span><span class="na">NONE</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">ImageUploadService</span> <span class="n">imageUploadService</span><span class="o">;</span> <span class="c1">// is null</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">order</span><span class="o">(</span><span class="nc">OrderCommand</span> <span class="n">orderCommand</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">changeOrderStatus</span><span class="o">(</span><span class="nc">OrderStatus</span><span class="o">.</span><span class="na">ACCEPTED</span><span class="o">);</span>
		<span class="n">domainEventListener</span><span class="o">.</span><span class="na">publish</span><span class="o">(</span><span class="k">new</span> <span class="nc">OrderCreatedEvent</span><span class="o">(</span><span class="n">orderComamnd</span><span class="o">));</span> <span class="c1">// NPE</span>
		<span class="n">imageUploadService</span><span class="o">.</span><span class="na">upload</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getOrderId</span><span class="o">(),</span> <span class="nc">ImageType</span><span class="o">.</span><span class="na">OrderCustomerRequest</span><span class="o">,</span> <span class="n">order</span><span class="o">.</span><span class="na">getCustomerImageUrl</span><span class="o">());</span> <span class="c1">// NPE</span>
	<span class="o">}</span>

	<span class="o">..</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이처럼 스프링 컨테이너가 관리하는 빈이 아닌 JPA 엔티티에는 의존성을 Spring이 직접 주입해줄 수 없고, 필요하다면 Load time weaving 이라는 것을 사용해야 합니다. 제가 알기로는 해당 기능을 사용하려면 AspectJ 라이브러리 관련해서 설정이 필요한데, 설정이 적용되어 있지 않았습니다.</p>

<p><a href="https://www.inflearn.com/questions/24903/%EC%97%94%ED%8B%B0%ED%8B%B0%EC%97%90-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%BD%EC%9A%B0">엔티티에 의존성 주입이 필요한 경우? - 인프런 질문 &amp; 답변</a></p>

<p>(물론 저도 영한님의 의견처럼 도메인 모델 내부에 외부 의존성을 가지는 것에 반대하는 입장이긴 했습니다  😂)</p>

<p><br /></p>

<p>그래서 엔티티 내 해당 필드는 null인 상태였고, 메서드에서 NPE가 발생한 것이었습니다.</p>

<p>이를 해결하기 위해 다른 프로젝트를 참고하여 maven plugin 설정과 main 클래스에 관련 어노테이션들을 추가하여 설정해주었습니다.</p>

<p><br /></p>

<p>API 호출을 재시도 해보니 잘 동작하였습니다. 하지만, 다른 곳에서 문제가 발생했습니다.</p>

<p>바로 테스트 코드였습니다.</p>

<p>해당 도메인 서비스에 대한 테스트 코드를 작성하는 과정에서 몇 가지 단점이 존재했습니다.</p>

<ul>
  <li>Mocking 제한적</li>
  <li>불가피한 <code class="language-plaintext highlighter-rouge">@SpringBootTest</code></li>
  <li><code class="language-plaintext highlighter-rouge">@DataJpaTest</code> 사용 불가능</li>
  <li>테스트 메인 메서드에도 Load time weaving 설정 필요</li>
</ul>

<p><br /></p>

<p>그래서, 결국 Load time weaving 관련해서 설정해주었던 작업들은 롤백하고 엔티티 내부의 외부 의존성도 제거하기로 했습니다. (다행히 신규 개발 중인 모델에서는 외부 의존성 필드가 별로 없었습니다 ㅎㅎ..)</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>

	<span class="o">..</span>
	

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">order</span><span class="o">(</span><span class="nc">OrderCommand</span> <span class="n">orderCommand</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">changeOrderStatus</span><span class="o">(</span><span class="nc">OrderStatus</span><span class="o">.</span><span class="na">ACCEPTED</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="o">..</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>외부 의존성을 도메인 모델로 부터 분리하고, 외부 의존성 관련 로직은 응용 서비스의 역할이라 판단하여 응용 서비스 계층으로 옮겨주었습니다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@Transactional</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderApplicationService</span> <span class="o">{</span>

	<span class="o">..</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">OrderCreateService</span> <span class="n">orderCreateService</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">DomainEventListener</span> <span class="n">domainEventListener</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">ImageUploadService</span> <span class="n">imageUploadService</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">order</span><span class="o">(</span><span class="nc">OrderRequestDto</span> <span class="n">dto</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">orderCreateService</span><span class="o">.</span><span class="na">order</span><span class="o">(</span><span class="k">new</span> <span class="nc">OrderComamnd</span><span class="o">(</span><span class="n">dto</span><span class="o">.</span><span class="na">getOrderId</span><span class="o">(),</span>
																							<span class="n">dto</span><span class="o">.</span><span class="na">getOrderMenus</span><span class="o">(),</span>
																							<span class="n">dto</span><span class="o">.</span><span class="na">getOrderDateTime</span><span class="o">()));</span>
		<span class="n">domainEventListener</span><span class="o">.</span><span class="na">publish</span><span class="o">(</span><span class="k">new</span> <span class="nc">OrderCreatedEvent</span><span class="o">(</span><span class="n">dto</span><span class="o">));</span>
		<span class="n">imageUploadService</span><span class="o">.</span><span class="na">upload</span><span class="o">(</span><span class="n">dto</span><span class="o">.</span><span class="na">getOrderId</span><span class="o">(),</span> 
															<span class="nc">ImageType</span><span class="o">.</span><span class="na">OrderCustomerRequest</span><span class="o">,</span> 
															<span class="n">dto</span><span class="o">.</span><span class="na">getCustomerImageUrl</span><span class="o">());</span>
	<span class="o">}</span>

	<span class="o">..</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>이렇게 도메인 엔티티로 부터 외부 의존성을 제거했더니, 도메인 메서드에 순수 도메인에 대한 로직만 남아서 테스트가 수월했습니다.</p>

<p>이번 포스팅에 작성한 사례를 겪으며 ‘테스트를 작성하기 쉬운 코드가 좋은 코드다 ‘ 라는 말에 공감할 수 있었습니다. 이래서 TDD가 각광을 받는걸까요?</p>

<p>테스트 코드를 작성하다가 불편함을 느낀다면 개발된 형상이 좋은 구조인지 한번 쯤 되돌아보는 시간을 가지면 좋을 것 같습니다 :)</p>]]></content><author><name>Taeho Kim</name></author><category term="테스트" /><category term="junit" /><category term="java" /><category term="spring boot" /><category term="aspectj" /><summary type="html"><![CDATA[배경]]></summary></entry><entry><title type="html">성능 이슈 발생한 무거운 API 튜닝하기</title><link href="https://ting-kim.github.io/java/2023/04/19/%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88-%EB%B0%9C%EC%83%9D%ED%95%9C-%EB%AC%B4%EA%B1%B0%EC%9A%B4-API-%ED%8A%9C%EB%8B%9D%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="성능 이슈 발생한 무거운 API 튜닝하기" /><published>2023-04-19T00:00:00+00:00</published><updated>2023-04-19T00:00:00+00:00</updated><id>https://ting-kim.github.io/java/2023/04/19/%EC%84%B1%EB%8A%A5%20%EC%9D%B4%EC%8A%88%20%EB%B0%9C%EC%83%9D%ED%95%9C%20%EB%AC%B4%EA%B1%B0%EC%9A%B4%20API%20%ED%8A%9C%EB%8B%9D%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://ting-kim.github.io/java/2023/04/19/%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88-%EB%B0%9C%EC%83%9D%ED%95%9C-%EB%AC%B4%EA%B1%B0%EC%9A%B4-API-%ED%8A%9C%EB%8B%9D%ED%95%98%EA%B8%B0.html"><![CDATA[<h3 id="배경">배경</h3>

<p>어느 날 사내 운영 환경 검증 중에 API 응답은 <code class="language-plaintext highlighter-rouge">504 gateway timeout</code> 이며, 어플리케이션 서버는 OOM(out of memory)이 발생하였습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.OutOfMemoryError: GC overhead limit exceeded
</code></pre></div></div>

<p>원인은 무거운 API가 7,000 건 이상의 데이터를 처리하면서 발생한 상황이었습니다.</p>

<p>7,000 건 정도의 데이터가 많지 않다고 느껴질 수 있으나, 해당 API는 데이터 양이나 트래픽이 많아질 경우 충분히 이슈가 발생할 만한 상황이었습니다. 조회 API임에도 불구하고 조회하는 과정에서 많은 연관된 데이터들을 읽어들이며 복잡한 연산까지 수행하고 있었기 때문입니다. CQRS가 안되어 있었죠.</p>

<p>여튼 빠르게 해결해야 했기에 CQRS 패턴을 적용하여 대대적인 기능 개선을 진행하긴 어려운 상황이었습니다.</p>

<h3 id="원인-분석">원인 분석</h3>

<p>먼저, OOM 이슈에는 GC가 강하게 연관되어 있기 때문에 어디선가 많은 양의 객체가 생성되고 제거(가비지 수집)되지 않고 있을 것이라 생각했습니다.</p>

<p>GC 분석 툴을 사용해본 적이 없는 터라, 초반에는 코드 단에서 살펴보며 분석해보았습니다. 의심되는 부분들은 여럿 있었지만, 확신이 없었으며 코드를 수정해도 얼마나 개선 되었는지 확인이 불가능했습니다.</p>

<p>그래서 GC 분석 툴을 실행시키는 포스팅을 찾아다녔는데, 결국에 가장 기본적인 VisualVM을 사용하게 되었습니다.</p>

<p>이를 실행시켜이슈 상황을 재현하며  GC/Memory 추이를 살펴보았습니다.</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230419_1.jpeg?raw=true" alt="VisualVM 상 어플리케이션의 heap 메모리" /></p>

<p>VisualVM 상 어플리케이션의 heap 메모리</p>

<p><br /></p>

<p>위 Heap 그래프에서 볼 수 있듯이, 어느 시점부터 프로세스가 메모리를 최대로 점유한 채 줄어들지 않고 있으며 사용중인 heap size도 줄지 않고 있습니다. GC는 계속 동작하는데, heap 메모리를 충분히 확보하지 못했기 때문에 <code class="language-plaintext highlighter-rouge">GC overhead limit exceeded</code> 이슈가 발생한 것으로 생각됩니다.</p>

<p>이번엔 heapdump 파일을 통해 또 다른 분석 툴()을 통해 인스턴스 현황(?)을 확인할 수 있었습니다.</p>

<p>—</p>

<p>분석 결과에서 가장 비율을 많이 차지한 인스턴스가 생성되는 곳이 몇 군데 있었는데, 디버깅을 통해 몇 가지 원인을 찾을 수 있었습니다.</p>

<p><br /></p>

<h3 id="문제-개선-1-비효율적인-로직-리팩토링">문제 개선 1. 비효율적인 로직 리팩토링</h3>

<p>먼저, 성능 개선을 진행할 수 있을 것 같은 로직(?)이 있었습니다. 예시 코드로 보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SaleRecord</span><span class="o">&gt;&gt;</span> <span class="nf">before</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">ids</span><span class="o">,</span>
                                           <span class="nc">YearMonth</span> <span class="n">yearMonth</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 개선 전 코드</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SaleRecord</span><span class="o">&gt;&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="nc">Maps</span><span class="o">.</span><span class="na">newHashMap</span><span class="o">();</span>
    <span class="n">salesByIds</span><span class="o">.</span><span class="na">keySet</span><span class="o">()</span>
              <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
              <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">ids:</span><span class="o">:</span><span class="n">contains</span><span class="o">)</span>
              <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">id</span> <span class="o">-&gt;</span> <span class="o">{</span>
                  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SaleRecord</span><span class="o">&gt;</span> <span class="n">sales</span> <span class="o">=</span> <span class="n">salesByIds</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
                  <span class="n">sales</span> <span class="o">=</span> <span class="n">sales</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                               <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">isBefore</span><span class="o">(</span><span class="n">yearMonth</span><span class="o">))</span>
                               <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
                  <span class="n">results</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">sales</span><span class="o">);</span>
              <span class="o">});</span>

    <span class="k">return</span> <span class="n">results</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>많은 분들이 예상하셨겠지만 위 코드는 이중 반복문 형태로 동작하고 있습니다. Map의 <code class="language-plaintext highlighter-rouge">keySet()</code> 기준으로 stream을 생성하고 그 안에서 id에 해당하는 <code class="language-plaintext highlighter-rouge">List&lt;SaleRecord&gt;</code> 값을 기준으로 다시 반복문을 실행하고 있습니다.</p>

<p>여기서 한 가지가 더 있는데, forEach 문을 보시면 stream 외부의 <code class="language-plaintext highlighter-rouge">Map&lt;Long, List&lt;SaleRecord&gt;&gt; results</code> 객체에 반복해서 데이터를 넣어주고 있습니다. Stream은 외부 객체 참조를 사용하지 않는 경우 성능이 좋은 것으로 이해하고 있습니다.</p>

<p>위 코드를 개선한 결과입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SaleRecord</span><span class="o">&gt;&gt;</span> <span class="nf">after</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">ids</span><span class="o">,</span>
                                          <span class="nc">YearMonth</span> <span class="n">yearMonth</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 개선 후 코드</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SaleRecord</span><span class="o">&gt;&gt;</span> <span class="n">salesByTarget</span> <span class="o">=</span> <span class="n">salesByIds</span><span class="o">.</span><span class="na">values</span><span class="o">()</span>
                                                          <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                                                          <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">Collection:</span><span class="o">:</span><span class="n">stream</span><span class="o">)</span>
                                                          <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">isBeforeThan</span><span class="o">(</span><span class="nc">YearMonth</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">getDate</span><span class="o">()),</span>
                                                                                    <span class="n">yearMonth</span><span class="o">))</span>
                                                          <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span>
                                                              <span class="nl">SaleRecord:</span><span class="o">:</span><span class="n">getId</span><span class="o">));</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">emptySaleIds</span> <span class="o">=</span> <span class="n">salesByIds</span><span class="o">.</span><span class="na">entrySet</span><span class="o">()</span>
                                        <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                                        <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">())</span>
                                        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">::</span><span class="n">getKey</span><span class="o">)</span>
                                        <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>

    <span class="k">for</span> <span class="o">(</span><span class="nc">Long</span> <span class="n">emptySaleId</span> <span class="o">:</span> <span class="n">emptySaleIds</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">salesByTarget</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">emptySaleId</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">emptyList</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">salesByTarget</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위에서 언급했던 내용들을 개선해보았습니다.</p>

<p>이중 반복문 형태로 사용하던 부분은 <code class="language-plaintext highlighter-rouge">flatMap()</code> 을 사용하는 형태로 변경하였습니다.</p>

<p>외부 객체를 참조하던 방식에서 Stream을 통해 grouping하며 예외 사항에 대해서 Stream 외부에서 데이터를 주입해주는 형태로 변경하였습니다.</p>

<p>실제로도 예상한 결과가 나올지 테스트를 수행해보았습니다.</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230419_2.png?raw=true" alt="테스트 결과" /></p>

<p>테스트 결과</p>

<p><br /></p>

<p>테스트는 총 100만 건 기준으로 진행하였으며, id 목록과 YearMonth는 적절히 배분하여 조건문을 수행하도록 하였습니다.</p>

<p>테스트 결과는 기대한 대로 기존 대비 개선한 결과가 성능이 더 높았는데, 측정된 시간이 각각 4095 ms, 164 ms 이므로 25배 정도 차이가 나는 것을 알 수 있습니다.</p>

<p><br /></p>

<h3 id="문제-개선-2-과도한-객체-생성-및-long-lived-객체">문제 개선 2. 과도한 객체 생성 및 Long-lived 객체</h3>

<p>1번 사례는 처리 시간과 관련한 성능 문제였지만, 주요 문제는 heap 메모리가 가득 차고 가비지 수집을 충분히 못하는 것이었습니다.</p>

<p>그래서 디버깅을 진행해보며 어느 시점에 heap 메모리가 급증하는지 확인했고, VisualVm에서 제공하는 heapdump 파일을 분석하는 기능을 이용하였습니다.</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230419_3.png?raw=true" alt="VisualVM에서 heapdump 파일을 분석한 결과" /></p>

<p>VisualVM에서 heapdump 파일을 분석한 결과</p>

<p><br /></p>

<p>보시면 객체 수, 사이즈 모두 <code class="language-plaintext highlighter-rouge">OrderDescription</code> 클래스가 높은 순위에 있는 것을 보실 수 있습니다.</p>

<p><code class="language-plaintext highlighter-rouge">Orderer</code>  객체도 순위권에 있는 것을 볼 수 있는데, 이는 <code class="language-plaintext highlighter-rouge">OrderDescription</code> 객체를 이용해서 연산하는 과정에서 생성되는 것이라 생각했습니다.</p>

<p>그래서 가장 의심되는 코드를 가져와봤습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Before</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">bulkCalculateV1</span><span class="o">(</span><span class="nc">OrderDescriptionDto</span> <span class="n">description</span><span class="o">,</span>
                            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">OrderDescriptionDto</span><span class="o">&gt;</span> <span class="n">descriptionsById</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">OrderDescription</span> <span class="n">rootNode</span> <span class="o">=</span> <span class="nc">OrderDescription</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">descriptionsById</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">getFirstOrderId</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getOrderId</span><span class="o">())),</span> <span class="kc">null</span><span class="o">);</span>

    <span class="c1">// ..</span>
<span class="o">}</span>

<span class="c1">// After</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">bulkCalculateV2</span><span class="o">(</span><span class="nc">OrderDescriptionDto</span> <span class="n">description</span><span class="o">,</span>
                            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">OrderDescription</span><span class="o">&gt;</span> <span class="n">descriptionsById</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">OrderDescription</span> <span class="n">firstOrder</span> <span class="o">=</span> <span class="n">descriptionsById</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">getFirstOrderId</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getOrderId</span><span class="o">()));</span>

    <span class="c1">// ..</span>
<span class="o">}</span>
</code></pre></div></div>

<p>보시면 V1 메서드에서는 <code class="language-plaintext highlighter-rouge">OrderDescription</code> 객체를 생성하고, V2 메서드에서는 Map에서 꺼낸 객체를 그대로 사용하고 있습니다.</p>

<p>이게 그렇게 큰 영향을 미칠까 싶을 수 있지만, 해당 메서드는 반복문 형태로 호출되고 있었기에 생각보다 큰 영향을 미치고 있었습니다.</p>

<p>V2로 변경 시 파라미터 타입이 달라서 해당 메서드를 호출하는 쪽에 수정이 필요했습니다.</p>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230419_4.jpeg?raw=true" alt="개선 후 heap 메모리 모습" /></p>

<p>개선 후 heap 메모리 모습</p>

<p><br /></p>

<p>꽤 많이 개선된 모습을 볼 수 있었습니다. (약 40-50% 축소)</p>

<p>문제가 되는 곳을 개선한 후, 리팩토링하며 이상한 점을 발견하였습니다.</p>

<p>대표로 추출된 id들만 특정 메서드에 인자로 넣으면 되는데, 모든 id를 주입하여 다소 복잡한 연산이 더 많이 발생하고 있었습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">calculate</span><span class="o">()</span> <span class="o">{</span>
  <span class="c1">// ..</span>
	<span class="n">createOrderDescriptions</span><span class="o">(</span><span class="n">teamId</span><span class="o">,</span> <span class="n">allSaleIds</span><span class="o">);</span> <span class="c1">// here</span>
	<span class="c1">// .. </span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderDescription</span><span class="o">&gt;</span> <span class="nf">createOrderDescriptions</span><span class="o">(</span><span class="nc">Long</span> <span class="n">teamId</span><span class="o">,</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">firstIds</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// ..</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이전에 제가 작업한 부분과 관련이 있었는데, 파라미터명을 주의 깊게 확인하지 않았으며 기존 비지니스 로직을 깊이 이해하지 못한 채로 개발을 진행하다 보니 이러한 상황이 발생한 것 같습니다.</p>

<p>그래서 필요한 이전 단계 메서드에서 대표 id들을 필터링하여 주입하고, 파라미터명도 보다 명확한 네이밍 변경을 통해 개선할 수 있었습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">calculate</span><span class="o">()</span> <span class="o">{</span>
  <span class="c1">// ..</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">firstOrderIds</span> <span class="o">=</span> <span class="n">getFirstOrderIdsBy</span><span class="o">(</span><span class="n">allSaleIds</span><span class="o">);</span>
	<span class="n">createOrderDescriptions</span><span class="o">(</span><span class="n">teamId</span><span class="o">,</span> <span class="n">firstOrderIds</span><span class="o">);</span> <span class="c1">// here</span>
	<span class="c1">// .. </span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderDescription</span><span class="o">&gt;</span> <span class="nf">createOrderDescriptions</span><span class="o">(</span><span class="nc">Long</span> <span class="n">teamId</span><span class="o">,</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">firstOrderIds</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// ..</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20230419_5.png?raw=true" alt="개선 후 heap 메모리 모습" /></p>

<p>개선 후 heap 메모리 모습</p>

<p><br /></p>

<p>이렇게 처리 시간 성능, heap 메모리 관점에서 리팩토링을 통해 개선해볼 수 있었습니다.</p>

<p>하지만 여전히 팀 내에서 해당 기능에 대한 성능과 구조 개선은 필요함을 인지하고 있기에, 이후 팀원들과 함께 CQRS 패턴을 적용하여 개선해볼 예정입니다.</p>

<h3 id="참고">참고</h3>

<p><a href="https://jupiny.com/2019/07/15/java-heap-dump-analysis/">Java Heap Dump 분석하기</a></p>]]></content><author><name>Taeho Kim</name></author><category term="Java" /><category term="java" /><category term="jvm" /><category term="heap" /><summary type="html"><![CDATA[배경]]></summary></entry><entry><title type="html">RequestDto는 왜 기본생성자가 없을 때 에러를 반환할까?</title><link href="https://ting-kim.github.io/spring-boot/2022/06/23/RequestDto%EB%8A%94_%EC%99%9C_%EA%B8%B0%EB%B3%B8%EC%83%9D%EC%84%B1%EC%9E%90%EA%B0%80_%EC%97%86%EC%9D%84_%EB%95%8C_%EC%97%90%EB%9F%AC%EB%A5%BC_%EB%B0%98%ED%99%98%ED%95%A0%EA%B9%8C.html" rel="alternate" type="text/html" title="RequestDto는 왜 기본생성자가 없을 때 에러를 반환할까?" /><published>2022-06-23T00:00:00+00:00</published><updated>2022-06-23T00:00:00+00:00</updated><id>https://ting-kim.github.io/spring-boot/2022/06/23/RequestDto%EB%8A%94_%EC%99%9C_%EA%B8%B0%EB%B3%B8%EC%83%9D%EC%84%B1%EC%9E%90%EA%B0%80_%EC%97%86%EC%9D%84_%EB%95%8C_%EC%97%90%EB%9F%AC%EB%A5%BC_%EB%B0%98%ED%99%98%ED%95%A0%EA%B9%8C</id><content type="html" xml:base="https://ting-kim.github.io/spring-boot/2022/06/23/RequestDto%EB%8A%94_%EC%99%9C_%EA%B8%B0%EB%B3%B8%EC%83%9D%EC%84%B1%EC%9E%90%EA%B0%80_%EC%97%86%EC%9D%84_%EB%95%8C_%EC%97%90%EB%9F%AC%EB%A5%BC_%EB%B0%98%ED%99%98%ED%95%A0%EA%B9%8C.html"><![CDATA[<p>일반적으로 클라이언트가 Request Body를 통해서 서버에 API 요청할 때, 서버에서는 이걸 <code class="language-plaintext highlighter-rouge">RequestDto</code>에 매핑해서 전달 받는다. (ex. <code class="language-plaintext highlighter-rouge">public ResponseDto call(@RequestBody RequestDto requestDto) { ... }</code>)</p>

<div align="center">

![클라이언트와 서버가 주고 받는 DTO](https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20210103_1.png?raw=true)

<span style="color:gray">클라이언트와 서버가 주고 받는 DTO</span>

</div>

<p><br /></p>

<p>여기서 만약 RequestDto에 기본 생성자를 구현하지 않았다면, 어떤 일이 벌어지게 될까?</p>

<div align="center">

![RequestDto에 기본 생성자가 없는 경우 요청 시 벌어지는 상황](https://github.com/Ting-Kim/ting-kim.github.io/blob/master/images/20210103_2.png?raw=true)

<span style="color:gray">RequestDto에 기본 생성자가 없는 경우 요청 시 벌어지는 상황</span>

</div>

<p><br /></p>

<h3 id="직렬화역직렬화는-jackson-라이브러리를-통해서-수행된다">직렬화/역직렬화는 jackson 라이브러리를 통해서 수행된다</h3>

<p>클라이언트 - 서버 간 요청/응답에 대한 Body 데이터와 객체 바인딩은 <code class="language-plaintext highlighter-rouge">jackson</code> 라이브러리를 통해 수행한다.</p>

<p>(<code class="language-plaintext highlighter-rouge">jackson</code> 라이브러리는 <code class="language-plaintext highlighter-rouge">spring-boot-starter-web</code> 라이브러리에 포함되어 있다)</p>

<p>클라이언트 -&gt; 서버의 경우는 역직렬화, 서버 -&gt; 클라이언트의 경우는 직렬화가 이루어진다.</p>

<p>이때, <code class="language-plaintext highlighter-rouge">Jackson2HttpMessageConverter</code>가 내부적으로 <code class="language-plaintext highlighter-rouge">ObjectMapper</code>를 사용해서 데이터를 처리한다.</p>

<p><code class="language-plaintext highlighter-rouge">ObjectMapper</code>는 <code class="language-plaintext highlighter-rouge">Getter(public)</code> / <code class="language-plaintext highlighter-rouge">Setter</code>을 통해 프로퍼티명을 확인한다.</p>

<p>(<code class="language-plaintext highlighter-rouge">BeanDeserializerFactory</code>에서 프로퍼티명 찾는 작업 수행, <code class="language-plaintext highlighter-rouge">BeanDeserializer</code>에서 DTO에 값을 주입)</p>

<p>값을 주입하는 것은 <code class="language-plaintext highlighter-rouge">java.lang.reflect</code> 패키지를 사용하기 때문에 <code class="language-plaintext highlighter-rouge">setter</code> 없이도 가능하다. (<code class="language-plaintext highlighter-rouge">Field</code> 자료형)</p>

<p>(Getter, Setter 중 하나만 존재하면 값 주입이 가능)</p>

<h3 id="그래서-objectmapper에서-기본-생성자를-어떻게-쓰고-왜-없을-때-안되는건데">그래서 ObjectMapper에서 기본 생성자를 어떻게 쓰고, 왜 없을 때 안되는건데?</h3>

<p>내부 코드는 크게 이렇게 동작한다고 한다.</p>

<ul>
  <li><strong>기본 생성자가 있는 경우</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">super.createUsingDefault()</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">return _defaultCreator.call()</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>기본 생성자가 없는 경우</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">deserializeFromObjectUsingNonDefault()</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">deletegateSerializer</code> 사용</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>여기서, 기본 생성자가 없는 경우 <code class="language-plaintext highlighter-rouge">deletegateSerializer</code>를 사용해야 하는데, 이는 DTO에 생성을 위임하거나 프로퍼티를 별도로 설정이 필요하다.</p>

<p>이러한 조건이 만족되지 않는다면 위와 같은 예외를 반환하는 것이다.</p>

<p>DTO에 생성을 위임하거나 프로퍼티를 별도 설정하는 방법은 Json 관련 어노테이션을 사용하는 것이다.</p>

<p>(<code class="language-plaintext highlighter-rouge">@JsonProperty</code>, <code class="language-plaintext highlighter-rouge">@JsonAutoDetect</code>, <code class="language-plaintext highlighter-rouge">@JsonCreator</code>)</p>

<hr />

<h3 id="참고-링크">참고 링크</h3>

<ul>
  <li><a href="https://bbbicb.tistory.com/46">@RequestBody 모델에 기본생성자, setter/getter가 필요한가?</a></li>
  <li><a href="https://velog.io/@conatuseus/RequestBody%EC%97%90-%EC%99%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%A0%95%EC%9E%90%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EA%B3%A0-Setter%EB%8A%94-%ED%95%84%EC%9A%94-%EC%97%86%EC%9D%84%EA%B9%8C-2-ejk5siejhh">@RequestBody에 왜 기본 생성자는 필요하고, Setter는 필요 없을까? #2</a></li>
  <li><a href="https://velog.io/@conatuseus/RequestBody%EC%97%90-%EC%99%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%98%EA%B3%A0-Setter%EB%8A%94-%ED%95%84%EC%9A%94-%EC%97%86%EC%9D%84%EA%B9%8C-3-idnrafiw">@RequestBody에 왜 기본 생성자는 필요하고, Setter는 필요 없을까? #3</a></li>
</ul>]]></content><author><name>Taeho Kim</name></author><category term="Spring-Boot" /><category term="Backend" /><category term="SpringBoot" /><category term="RequestDto" /><summary type="html"><![CDATA[일반적으로 클라이언트가 Request Body를 통해서 서버에 API 요청할 때, 서버에서는 이걸 RequestDto에 매핑해서 전달 받는다. (ex. public ResponseDto call(@RequestBody RequestDto requestDto) { ... })]]></summary></entry><entry><title type="html">[PS] 테트로미노 (백준 14500번)</title><link href="https://ting-kim.github.io/algorithm(problem-solving)/2022/03/14/PS-%ED%85%8C%ED%8A%B8%EB%A1%9C%EB%AF%B8%EB%85%B8-(%EB%B0%B1%EC%A4%80-14500%EB%B2%88).html" rel="alternate" type="text/html" title="[PS] 테트로미노 (백준 14500번)" /><published>2022-03-14T00:00:00+00:00</published><updated>2022-03-14T00:00:00+00:00</updated><id>https://ting-kim.github.io/algorithm(problem-solving)/2022/03/14/%5BPS%5D%20%ED%85%8C%ED%8A%B8%EB%A1%9C%EB%AF%B8%EB%85%B8%20(%EB%B0%B1%EC%A4%80%2014500%EB%B2%88)</id><content type="html" xml:base="https://ting-kim.github.io/algorithm(problem-solving)/2022/03/14/PS-%ED%85%8C%ED%8A%B8%EB%A1%9C%EB%AF%B8%EB%85%B8-(%EB%B0%B1%EC%A4%80-14500%EB%B2%88).html"><![CDATA[<p>오랜만에 <code class="language-plaintext highlighter-rouge">Java</code>로 <code class="language-plaintext highlighter-rouge">PS</code>(<a href="https://www.acmicpc.net/problem/14500">테트로미노 (백준 14500번)</a>)를 해봤다.</p>

<p><code class="language-plaintext highlighter-rouge">클린 코드</code>, <code class="language-plaintext highlighter-rouge">TDD</code>에 대한 내용을 여기저기서 조금씩이라도 습득하면서 신경을 쓰면서 하니까 확실히 이전보다는 메서드 분리 횟수가 많아진 것 같다.</p>

<p>조금 고민이 되는 점은.. 클린 코드에서는 들여쓰기 1번 만으로 구현이 가능해야 한다는 내용도 있는데, <code class="language-plaintext highlighter-rouge">while</code> 문 내에서 특정 조건일 때 <code class="language-plaintext highlighter-rouge">continue</code> 시키는 경우도 가능한지 궁금하다. 좀 더 많은 내용을 보고 학습하면 이렇게 애매한 부분들도 채워지지 않을까?</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayDeque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Deque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">static</span> <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dy</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">};</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dx</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">N</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">M</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">nodeMap</span><span class="o">;</span>
    <span class="kd">static</span> <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">TetromioPart</span><span class="o">&gt;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">inputAndInitialize</span><span class="o">();</span>
        <span class="n">bfs</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bfs</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">beforeDirection</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">price</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(!</span><span class="n">deque</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">TetromioPart</span> <span class="n">tetromioPart</span> <span class="o">=</span> <span class="n">deque</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="n">y</span> <span class="o">=</span> <span class="n">tetromioPart</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">tetromioPart</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
            <span class="n">beforeDirection</span> <span class="o">=</span> <span class="n">tetromioPart</span><span class="o">.</span><span class="na">beforeDirection</span><span class="o">;</span>
            <span class="n">cnt</span> <span class="o">=</span> <span class="n">tetromioPart</span><span class="o">.</span><span class="na">cnt</span><span class="o">;</span>
            <span class="n">price</span> <span class="o">=</span> <span class="n">tetromioPart</span><span class="o">.</span><span class="na">price</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="mi">4</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">updateAnswer</span><span class="o">(</span><span class="n">price</span><span class="o">);</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">beforeDirection</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
                <span class="n">ny</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">isInboundary</span><span class="o">(</span><span class="n">ny</span><span class="o">,</span> <span class="n">nx</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
                
                <span class="n">deque</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
                    <span class="k">new</span> <span class="nf">TetromioPart</span><span class="o">(</span><span class="n">ny</span><span class="o">,</span> <span class="n">nx</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">price</span><span class="o">+</span><span class="n">nodeMap</span><span class="o">[</span><span class="n">ny</span><span class="o">][</span><span class="n">nx</span><span class="o">])</span>
                <span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">updateAnswer</span><span class="o">(</span><span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">answer</span> <span class="o">&lt;</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">answer</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sumArround</span><span class="o">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">nodeMap</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">];</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">sum</span> <span class="o">=</span> <span class="n">nodeMap</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">];</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
                <span class="n">sum</span> <span class="o">+=</span> <span class="n">nodeMap</span><span class="o">[</span><span class="n">y</span><span class="o">+</span><span class="n">dy</span><span class="o">[</span><span class="n">j</span><span class="o">]][</span><span class="n">x</span><span class="o">+</span><span class="n">dx</span><span class="o">[</span><span class="n">j</span><span class="o">]];</span>
            <span class="o">}</span>
            <span class="n">updateAnswer</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
        <span class="o">}</span>
        
        
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isInboundary</span><span class="o">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">+</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="no">M</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> 
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">inputAndInitialize</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Reader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Reader</span><span class="o">();</span>
        <span class="no">N</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
        <span class="no">M</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
        <span class="n">nodeMap</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">2</span><span class="o">][</span><span class="no">M</span><span class="o">+</span><span class="mi">2</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="no">M</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">price</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
                <span class="n">nodeMap</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
                <span class="n">sumArround</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
                <span class="n">deque</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">TetromioPart</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">price</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="no">M</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">sumArround</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Reader</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">bufferedReader</span><span class="o">;</span>
        <span class="nc">StringTokenizer</span> <span class="n">stringTokenizer</span><span class="o">;</span>
        
        <span class="nc">Reader</span> <span class="o">(){</span>
            <span class="n">bufferedReader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="nf">read</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">stringTokenizer</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">stringTokenizer</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">stringTokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">bufferedReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">stringTokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="nf">readInt</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">read</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TetromioPart</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">beforeDirection</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">cnt</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>
        
        <span class="nc">TetromioPart</span><span class="o">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nextDirection</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cnt</span><span class="o">,</span> <span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">beforeDirection</span> <span class="o">=</span> <span class="o">(</span><span class="n">nextDirection</span> <span class="o">+</span> <span class="mi">2</span><span class="o">)</span> <span class="o">%</span> <span class="mi">4</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">cnt</span> <span class="o">=</span> <span class="n">cnt</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>]]></content><author><name>Taeho Kim</name></author><category term="Algorithm(Problem-Solving)" /><category term="PS" /><category term="algorithm" /><category term="bfs" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[운영체제] Process Scheduling 2 (Synchronize)</title><link href="https://ting-kim.github.io/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/2022/03/12/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-Process-Scheduling-2.html" rel="alternate" type="text/html" title="[운영체제] Process Scheduling 2 (Synchronize)" /><published>2022-03-12T00:00:00+00:00</published><updated>2022-03-12T00:00:00+00:00</updated><id>https://ting-kim.github.io/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/2022/03/12/%5B%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%5D%20Process%20Scheduling%202</id><content type="html" xml:base="https://ting-kim.github.io/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/2022/03/12/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-Process-Scheduling-2.html"><![CDATA[<h1 id="process-scheduling-2-synchronize">Process Scheduling 2 (Synchronize)</h1>

<blockquote>
  <p>이화여대 반효경 교수님의 kocw 운영체제 강의를 들으면서 개인적으로 작성한 내용입니다.</p>
</blockquote>

<p><br /></p>

<p><strong>스케쥴링</strong></p>

<ul>
  <li>FCFS(First-come First-service)</li>
  <li>Round Robin(RR)
    <ul>
      <li>CPU를 기다리는 시간이 CPU를 사용하려는 시간에 어느정도 비례하는 측면에서 공정한 스케쥴링이라고 할 수 있음.</li>
      <li>각 프로세스는 동일한 크기의 할당 시간(time quantum)을 가짐.</li>
      <li>Process Context를 save하고, CPU를 다시 얻었을 때는 그 지점부터 재개할 수 있는 메커니즘을 제공한다는 점이 장점이다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><strong>Multilevel Queue</strong></p>

<ul>
  <li>
    <p>우선순위</p>

    <p>Highest↑</p>

    <ul>
      <li>System Processes (시스템 관련)</li>
      <li>Interactive (사용자와 인터렉션)</li>
      <li>interactive editing</li>
      <li>batch (cpu만 오랫동안 사용하는 프로세스)</li>
      <li>student processes</li>
    </ul>

    <p>Lowest↓</p>
  </li>
  <li>의문점
    <ul>
      <li>프로세스를 어떤 queue에 넣을 것인가</li>
      <li>우선순위 큐에 따라만 cpu를 줄 것인가
        <ul>
          <li>우선순위가 낮은 큐는 Starvation 을 겪을 수 있다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Ready queue 여러 개 분할
    <ul>
      <li>foreground(interactive)</li>
      <li>background(batch - no human interaction)</li>
    </ul>
  </li>
  <li>큐 마다 독립적인 스케줄링 알고리즘
    <ul>
      <li>foreground 는 RR</li>
      <li>background 는 FCFS</li>
    </ul>
  </li>
  <li>큐에 대해서도 스케줄링이 필요함
    <ul>
      <li>Fixed priority scheduling</li>
      <li>Time slice
        <ul>
          <li>foreground / background 적절한 비율을 할당</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><strong>Multilevel Feedback Queue</strong></p>

<ul>
  <li>신분(?)을 극복 못하는 문제를 해결하기 위해..
    <ul>
      <li>프로세스가 다른 큐로 이동이 가능함</li>
    </ul>
  </li>
  <li>Queue의 수</li>
  <li>승격 기준</li>
  <li>처음 프로세스를 할당하는 큐 기준
    <ul>
      <li>처음 들어오는 프로세스는 가장 우선순위가 높은 큐에 넣음
        <ul>
          <li>Time quantum을 낮게 줌 (Q_0 = 8ms)</li>
          <li>할당 시간 끝나도 안끝나면 아래 큐로 강등시키고(quantum도 낮춤) (Q_1 = 16ms)</li>
          <li>더 낮아지면 FCFS로 강등</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><strong>Multiple-Processor Scheduling</strong></p>

<ul>
  <li>Homogeneous processor 의 경우?</li>
  <li>Load sharing
    <ul>
      <li>부하를 적절히 공유하는 메커니즘이 필요함</li>
      <li>CPU 마다 한 줄 또는 여러 줄을 세울 수도 있다.</li>
    </ul>
  </li>
  <li>Symmetric Multiprocessing (SMP)
    <ul>
      <li>모든 CPU가 대등해서 각 CPU가 알아서 스케줄링을 결정</li>
    </ul>
  </li>
  <li>Asymmetric multiprocessing
    <ul>
      <li>CPU가 여러개 있는데, 그 중 하나의 CPU가 전체적인 control 을 담당하는 방식</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><strong>Real-Time Scheduling</strong></p>

<p>read-time job: 정해진 시간 내에 완수가 되어야 함 (deadline 존재)</p>

<ul>
  <li>Hard real-time systems</li>
  <li>Soft real-time computing
    <ul>
      <li>일반 프로세스에 비해 높은 priority를 가지나, 무조건 deadline 을 지키지는 않음</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><strong>Thread Scheduling</strong></p>

<p>구현 방식</p>

<ul>
  <li>Local Scheduling
    <ul>
      <li>User level thread, 사용자 프로세스가 직접 스레드를 관리하고, OS는 스레드의 존재를 모름</li>
      <li>OS의 입장에서는 해당 프로세스에 CPU를 줄지 말지 만 결정
        <ul>
          <li>프로세스 내부에서 어떤 스레드에 CPU를 줄 지 결정</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Global Scheduling
    <ul>
      <li>Kernel level thread, 프로세스의 경우와 똑같이 커널의 단기 스케줄러가 결정</li>
      <li>OS가 특정 알고리즘에 근거해서 어떤 스레드에 CPU를 줄 지 결정</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><strong>Algorithm Evaluation</strong></p>

<ul>
  <li>Queueing models (굉장히 이론적인 방법)
    <ul>
      <li>service rate(처리율)와 arrival rate(도착률) 등을 통해 계산해서 각종 performance index 값을 계산</li>
    </ul>
  </li>
  <li>Implementation (구현) &amp; Measurement (성능 측정)
    <ul>
      <li>실제 시스템에 알고리즘을 구현해서 성능을 측정 비교</li>
      <li>시간이 너무 오래걸리고 작업이 크다.</li>
    </ul>
  </li>
  <li>Simulation (모의 실험)
    <ul>
      <li>알고리즘을 시뮬레이션으로 작성하고 <code class="language-plaintext highlighter-rouge">trace</code> 입력을 통해 결과 비교</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="process-synchronization">Process Synchronization</h3>

<p>Execution - Box ↔ Storage - Box</p>

<ul>
  <li>데이터 읽고 수정한 후 다시 저장하는 경우, Synchronization 문제가 발생한다.</li>
  <li>저장소는 하나고, 여러 주체가 이에 접근할 때 Race Condition의 가능성이 있다.</li>
  <li>프로세스는 일반적인 경우, 자기 주소공간만 접근하기 때문에 이런 문제가 발생할 일이 없다.</li>
  <li>프로세스가 직접 실행하지 못하는 작업의 경우, OS에게 작업을 요청하는 시스템 콜을 한다.
    <ul>
      <li>커널의 코드를 실행할 때는 커널의 데이터(공유 데이터)에 접근할 수 있다.</li>
    </ul>
  </li>
  <li>Race Condition 이 발생하는 경우
    <ul>
      <li>
        <p>Kernel 수행 중 인터럽트 발생 시</p>

        <p>(고급 언어에서의 변수값 변경은 CPU 내부에서는 여러개의 instruction으로 실행된다. 메모리 내 변수 값을 CPU 내부의 레지스터에 저장시키고, 레지스터 값을 수정하고 이를 다시 메모리의 변수 위치에 쓴다.)</p>

        <p>ex. count++의 경우</p>

        <ul>
          <li>변수를 CPU로 읽어들이는(load) 중에 인터럽트가 들어오면, 인터럽트 핸들러가 실행된다.</li>
          <li>인터럽트 핸들러도 Kernel 상의 코드이다.
            <ul>
              <li>Kernel의 데이터인 변수를 수정(count—)하고, 인터럽트 처리가 끝나면 원래 상태로 되돌린다.</li>
            </ul>
          </li>
          <li>이미 load한 상태여서 count++하기 때문에 count는 원래 값이 됨.</li>
        </ul>

        <p>그래서 중요한 작업 중에는 원래 작업이 끝나기 전까지는 interrupt를 disable 시키는 방식을 사용하는데, 무조건 막으면 여러가지 문제가 발생할 수 있기 때문에 어떻게 처리하는지 등 내용들을 다루고자 한다.</p>
      </li>
      <li>Process가 시스템 콜 하여 Kernel mode로 수행 중인데 Context Switching 이 일어나는 경우
        <ul>
          <li>이를 해결하기 위해 Kernel 모드에서 수행 중일 때는 CPU를 preempt 하지 않게 한다.</li>
        </ul>
      </li>
      <li>Multiprocessor 에서 shared memory 내의 kernel data
        <ul>
          <li>Multiprocessor 에서는 위 2가지 케이스에서의 해결책으로는 해결이 안된다.</li>
          <li>해결하기 위해서는 데이터 접근 시 Lock / UnLock 을 걸어야 한다.
            <ol>
              <li>개별 데이터에 접근할 때 마다 Lock 거는 방법</li>
            </ol>

            <p>→ 해당 데이터가 아니면 여러 프로세서가 접근할 수 있게!</p>
          </li>
        </ul>

        <ol>
          <li>
            <p>커널에 한번에 하나의 CPU 만 접근할 수 있게 하는 방법</p>

            <p>→ 너무 비효율적이다.</p>
          </li>
        </ol>
      </li>
    </ul>

    <aside>
  🔖 결국, Shared data에  Concurrent access는 데이터의 inconsistency를 발생시킬 수 있고,
    
  이를 해결하기 위해(consistency 유지하기 위해) Cooperating process 간 실행 순서(orderly execution) 을 정해주는 메커니즘이 필요하다.
  → Concurrent process는 동기화(Synchronize) 되어야 한다.
    
  </aside>
  </li>
</ul>

<p><br /></p>

<p><strong>Critical-Section (임계 구역) Problem</strong></p>

<ul>
  <li>여러 프로세스가 공유 데이터를 동시에 사용하고자 하는 경우</li>
  <li>Critical Section 은 공유데이터에 접근하는 코드 영역</li>
  <li>특정 프로세스가 Critical Section 에 있는 경우 다른 모든 프로세스는 여기에 접근 불가능해야 한다.
    <ul>
      <li>디른 프로세스들이 Critical Section 전에 멈춰있어야 한다는 문제가 존재함</li>
      <li>이를 해결하기 위한 다양한 알고리즘 존재 → 다음 장에서 다룰 것</li>
    </ul>
  </li>
</ul>]]></content><author><name>Taeho Kim</name></author><category term="운영체제" /><category term="운영체제" /><category term="OS" /><category term="Process Scheduling" /><category term="Synchronize" /><summary type="html"><![CDATA[Process Scheduling 2 (Synchronize)]]></summary></entry></feed>