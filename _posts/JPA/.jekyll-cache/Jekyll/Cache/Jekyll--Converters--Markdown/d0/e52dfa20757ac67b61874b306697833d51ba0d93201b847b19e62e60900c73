I"~<p><a href="https://programmers.co.kr/learn/courses/30/lessons/72412">문제 링크</a></p>

<h3 id="순위-검색-프로그래머스-lv-2">순위 검색 (프로그래머스 Lv 2)</h3>

<p>문자열 parsing과 dict(해쉬)의 중요성을 다시금 느끼는 문제였다.</p>

<p><br /></p>

<p><strong>느낀 점</strong></p>

<ul>
  <li>파이썬 라이브러리 <strong>bisect</strong>
    <ul>
      <li>이진 탐색을 해주는 라이브러리</li>
      <li><code class="language-plaintext highlighter-rouge">bisect.bisect_left(arr, element, (start) ,(end))</code>
        <ul>
          <li>arr(오름차순으로 정렬되어 있다고 가정)에 element를 넣는다면 어디에 위치할 지 index를 반환함. element 보다 작은 원소 뒤에 위치(element와 같은 원소보다는 앞(왼쪽)에 위치함)</li>
          <li><code class="language-plaintext highlighter-rouge">bisect_right()</code> 는 element 보다 큰 원소 앞에 위치</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>검색하기 전에 dict의 item들을 정렬하냐, 검색하면서 해당 item들을 정렬하냐 둘 중 후자가 시간이 덜 걸린다고 생각했다.
    <ul>
      <li>그러나, (‘–seniorchicken’: 100 ‘–seniorchicken’: 150, ..) 등의 <strong>중복이 무수히 발생할 수 있다.</strong> (문제의 조건을 보면 ‘query 배열의 크기는 100,000 이하’ 지만 ‘언어’, ‘직군’, ‘경력’, ‘소울푸드’ 는 모두 보기가 3개 뿐이기 때문)</li>
      <li>그래서 검색 전에 정렬 시키는게 효율성 테스트에서 10배 정도 빨랐다.</li>
    </ul>
  </li>
</ul>
:ET